# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from . import models


class ApplicationInsightsDataClientConfiguration(Configuration):
    """Configuration for ApplicationInsightsDataClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param app_id: ID of the application. This is Application ID from the API
     Access settings blade in the Azure portal.
    :type app_id: str
    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, app_id, credentials, base_url=None):

        if app_id is None:
            raise ValueError("Parameter 'app_id' must not be None.")
        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'https://api.applicationinsights.io/v1'

        super(ApplicationInsightsDataClientConfiguration, self).__init__(base_url)

        self.add_user_agent('azure-applicationinsights/{}'.format(VERSION))

        self.app_id = app_id
        self.credentials = credentials


class ApplicationInsightsDataClient(object):
    """Composite Swagger for Application Insights Data Client

    :ivar config: Configuration for client.
    :vartype config: ApplicationInsightsDataClientConfiguration

    :param app_id: ID of the application. This is Application ID from the API
     Access settings blade in the Azure portal.
    :type app_id: str
    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, app_id, credentials, base_url=None):

        self.config = ApplicationInsightsDataClientConfiguration(app_id, credentials, base_url)
        self._client = ServiceClient(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = 'v1'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def get_metric(
            self, metric_id, timespan=None, interval=None, aggregation=None, segment=None, top=None, orderby=None, filter=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve metric data.

        Gets metric values for a single metric.

        :param metric_id: ID of the metric. This is either a standard AI
         metric, or an application-specific custom metric. Possible values
         include: 'requests/count', 'requests/duration', 'requests/failed',
         'users/count', 'users/authenticated', 'pageViews/count',
         'pageViews/duration', 'client/processingDuration',
         'client/receiveDuration', 'client/networkDuration',
         'client/sendDuration', 'client/totalDuration', 'dependencies/count',
         'dependencies/failed', 'dependencies/duration', 'exceptions/count',
         'exceptions/browser', 'exceptions/server', 'sessions/count',
         'performanceCounters/requestExecutionTime',
         'performanceCounters/requestsPerSecond',
         'performanceCounters/requestsInQueue',
         'performanceCounters/memoryAvailableBytes',
         'performanceCounters/exceptionsPerSecond',
         'performanceCounters/processCpuPercentage',
         'performanceCounters/processIOBytesPerSecond',
         'performanceCounters/processPrivateBytes',
         'performanceCounters/processorCpuPercentage',
         'availabilityResults/availabilityPercentage',
         'availabilityResults/duration', 'billing/telemetryCount',
         'customEvents/count'
        :type metric_id: str or ~azure.applicationinsights.models.MetricId
        :param timespan: The timespan over which to retrieve metric values.
         This is an ISO8601 time period value. If timespan is omitted, a
         default time range of `PT12H` ("last 12 hours") is used. The actual
         timespan that is queried may be adjusted by the server based. In all
         cases, the actual time span used for the query is included in the
         response.
        :type timespan: str
        :param interval: The time interval to use when retrieving metric
         values. This is an ISO8601 duration. If interval is omitted, the
         metric value is aggregated across the entire timespan. If interval is
         supplied, the server may adjust the interval to a more appropriate
         size based on the timespan used for the query. In all cases, the
         actual interval used for the query is included in the response.
        :type interval: timedelta
        :param aggregation: The aggregation to use when computing the metric
         values. To retrieve more than one aggregation at a time, separate them
         with a comma. If no aggregation is specified, then the default
         aggregation for the metric is used.
        :type aggregation: list[str or
         ~azure.applicationinsights.models.MetricsAggregation]
        :param segment: The name of the dimension to segment the metric values
         by. This dimension must be applicable to the metric you are
         retrieving. To segment by more than one dimension at a time, separate
         them with a comma (,). In this case, the metric data will be segmented
         in the order the dimensions are listed in the parameter.
        :type segment: list[str or
         ~azure.applicationinsights.models.MetricsSegment]
        :param top: The number of segments to return.  This value is only
         valid when segment is specified.
        :type top: int
        :param orderby: The aggregation function and direction to sort the
         segments by.  This value is only valid when segment is specified.
        :type orderby: str
        :param filter: An expression used to filter the results.  This value
         should be a valid OData filter expression where the keys of each
         clause should be applicable dimensions for the metric you are
         retrieving.
        :type filter: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MetricsResult or ClientRawResponse if raw=true
        :rtype: ~azure.applicationinsights.models.MetricsResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.applicationinsights.models.ErrorResponseException>`
        """
        # Construct URL
        url = '/apps/{appId}/metrics/{metricId}'
        path_format_arguments = {
            'appId': self._serialize.url("self.config.app_id", self.config.app_id, 'str'),
            'metricId': self._serialize.url("metric_id", metric_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if timespan is not None:
            query_parameters['timespan'] = self._serialize.query("timespan", timespan, 'str')
        if interval is not None:
            query_parameters['interval'] = self._serialize.query("interval", interval, 'duration')
        if aggregation is not None:
            query_parameters['aggregation'] = self._serialize.query("aggregation", aggregation, '[MetricsAggregation]', div=',', min_items=1)
        if segment is not None:
            query_parameters['segment'] = self._serialize.query("segment", segment, '[str]', div=',', min_items=1)
        if top is not None:
            query_parameters['top'] = self._serialize.query("top", top, 'int')
        if orderby is not None:
            query_parameters['orderby'] = self._serialize.query("orderby", orderby, 'str')
        if filter is not None:
            query_parameters['filter'] = self._serialize.query("filter", filter, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MetricsResult', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def get_metrics_metadata(
            self, custom_headers=None, raw=False, **operation_config):
        """Retrieve metric metatadata.

        Gets metadata describing the available metrics.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.applicationinsights.models.ErrorResponseException>`
        """
        # Construct URL
        url = '/apps/{appId}/metrics/metadata'
        path_format_arguments = {
            'appId': self._serialize.url("self.config.app_id", self.config.app_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def get_events(
            self, event_type, timespan=None, filter=None, search=None, orderby=None, select=None, skip=None, top=None, format=None, count=None, apply=None, custom_headers=None, raw=False, **operation_config):
        """Execute OData query.

        Executes an OData query for events.

        :param event_type: The type of events to query; either a standard
         event type (`traces`, `customEvents`, `pageViews`, `requests`,
         `dependencies`, `exceptions`, `availabilityResults`) or `$all` to
         query across all event types. Possible values include: '$all',
         'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests',
         'dependencies', 'exceptions', 'availabilityResults',
         'performanceCounters', 'customMetrics'
        :type event_type: str or ~azure.applicationinsights.models.EventType
        :param timespan: Optional. The timespan over which to retrieve events.
         This is an ISO8601 time period value.  This timespan is applied in
         addition to any that are specified in the Odata expression.
        :type timespan: str
        :param filter: An expression used to filter the returned events
        :type filter: str
        :param search: A free-text search expression to match for whether a
         particular event should be returned
        :type search: str
        :param orderby: A comma-separated list of properties with \\"asc\\"
         (the default) or \\"desc\\" to control the order of returned events
        :type orderby: str
        :param select: Limits the properties to just those requested on each
         returned event
        :type select: str
        :param skip: The number of items to skip over before returning events
        :type skip: int
        :param top: The number of events to return
        :type top: int
        :param format: Format for the returned events
        :type format: str
        :param count: Request a count of matching items included with the
         returned events
        :type count: bool
        :param apply: An expression used for aggregation over returned events
        :type apply: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: EventsResults or ClientRawResponse if raw=true
        :rtype: ~azure.applicationinsights.models.EventsResults or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.applicationinsights.models.ErrorResponseException>`
        """
        # Construct URL
        url = '/apps/{appId}/events/{eventType}'
        path_format_arguments = {
            'appId': self._serialize.url("self.config.app_id", self.config.app_id, 'str'),
            'eventType': self._serialize.url("event_type", event_type, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if timespan is not None:
            query_parameters['timespan'] = self._serialize.query("timespan", timespan, 'str')
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        if search is not None:
            query_parameters['$search'] = self._serialize.query("search", search, 'str')
        if orderby is not None:
            query_parameters['$orderby'] = self._serialize.query("orderby", orderby, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, 'str')
        if skip is not None:
            query_parameters['$skip'] = self._serialize.query("skip", skip, 'int')
        if top is not None:
            query_parameters['$top'] = self._serialize.query("top", top, 'int')
        if format is not None:
            query_parameters['$format'] = self._serialize.query("format", format, 'str')
        if count is not None:
            query_parameters['$count'] = self._serialize.query("count", count, 'bool')
        if apply is not None:
            query_parameters['$apply'] = self._serialize.query("apply", apply, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('EventsResults', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def get_event(
            self, event_type, event_id, timespan=None, custom_headers=None, raw=False, **operation_config):
        """Get an event.

        Gets the data for a single event.

        :param event_type: The type of events to query; either a standard
         event type (`traces`, `customEvents`, `pageViews`, `requests`,
         `dependencies`, `exceptions`, `availabilityResults`) or `$all` to
         query across all event types. Possible values include: '$all',
         'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests',
         'dependencies', 'exceptions', 'availabilityResults',
         'performanceCounters', 'customMetrics'
        :type event_type: str or ~azure.applicationinsights.models.EventType
        :param event_id: ID of event.
        :type event_id: str
        :param timespan: Optional. The timespan over which to retrieve events.
         This is an ISO8601 time period value.  This timespan is applied in
         addition to any that are specified in the Odata expression.
        :type timespan: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: EventsResults or ClientRawResponse if raw=true
        :rtype: ~azure.applicationinsights.models.EventsResults or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.applicationinsights.models.ErrorResponseException>`
        """
        # Construct URL
        url = '/apps/{appId}/events/{eventType}/{eventId}'
        path_format_arguments = {
            'appId': self._serialize.url("self.config.app_id", self.config.app_id, 'str'),
            'eventType': self._serialize.url("event_type", event_type, 'str'),
            'eventId': self._serialize.url("event_id", event_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if timespan is not None:
            query_parameters['timespan'] = self._serialize.query("timespan", timespan, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('EventsResults', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def get_events_metadata_odata(
            self, custom_headers=None, raw=False, **operation_config):
        """Get OData metadata.

        Gets OData EDMX metadata describing the event data model.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.applicationinsights.models.ErrorResponseException>`
        """
        # Construct URL
        url = '/apps/{appId}/events/$metadata'
        path_format_arguments = {
            'appId': self._serialize.url("self.config.app_id", self.config.app_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def query(
            self, query, timespan=None, timespan1=None, custom_headers=None, raw=False, **operation_config):
        """Execute an Analytics query.

        Executes an Analytics query for data.
        [Here](https://dev.applicationinsights.io/documentation/Using-the-API/Query)
        is an example for using POST with an Analytics query.

        :param query: The query to execute.
        :type query: str
        :param timespan: Optional. The timespan over which to query data. This
         is an ISO8601 time period value.  This timespan is applied in addition
         to any that are specified in the query expression.
        :type timespan: str
        :param timespan1: Optional. The timespan over which to query data.
         This is an ISO8601 time period value.  This timespan is applied in
         addition to any that are specified in the query expression.
        :type timespan1: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: QueryResults or ClientRawResponse if raw=true
        :rtype: ~azure.applicationinsights.models.QueryResults or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.applicationinsights.models.ErrorResponseException>`
        """
        body = models.QueryBody(query=query)

        # Construct URL
        url = '/apps/{appId}/query'
        path_format_arguments = {
            'appId': self._serialize.url("self.config.app_id", self.config.app_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if timespan is not None:
            query_parameters['timespan'] = self._serialize.query("timespan", timespan, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body, 'QueryBody')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('QueryResults', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
